image: bohushvitali/applications-ci

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  WEB_APPLIATOIN_STAGING_URL: https://sandbox-bcdc7.firebaseapp.com/

services:
  - docker:dind

stages:
  - prepare
  - build
  - test
  - staging
  - audit
  - reports
  - production

cache:
  key: $CI_PROJECT_NAMESPACE
  paths:
    - .pnpm-store/

before_script:
  - npm config set store .pnpm-store
  - npm config set verify-store-integrity false
  - npm config set rebuild-bundle false

applications-dependencies-install:
  stage: prepare
  before_script:
    - npm config set store .pnpm-store
  cache:
    key: $CI_PROJECT_NAMESPACE
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications
    - pnpm install --prefix sources/applications/functions
    - echo "Dependencies Install Finished"
  only:
    - master
  when: always
  allow_failure: false

web-application-build-staging:
  stage: build
  environment:
    name: staging
  dependencies:
    - applications-dependencies-install
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - npm run --prefix sources/applications udk.web.application.build
    - echo "Stating Build Finished"
  artifacts:
    paths:
      - sources/applications/dist
  only:
    - master
  when: always
  allow_failure: false

web-application-build-production:
  stage: build
  environment:
    name: production
  dependencies:
    - applications-dependencies-install
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - npm run --prefix sources/applications udk.web.application.build
    - mkdir sources/applications/production
    - cp -r sources/applications/dist/apps/* sources/applications/production
    - echo "Production Build Finished"
  artifacts:
    paths:
      - sources/applications/dist
      - sources/applications/production
  only:
    - master
  when: always
  allow_failure: false

applications-check-formatting:
  stage: test
  dependencies:
    - applications-dependencies-install
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - npm run --prefix sources/applications format.check $(git rev-parse $CI_COMMIT_SHA) $CI_COMMIT_SHA
    - echo "applications Check Formatting Finished"

applications-check-linting:
  stage: test
  dependencies:
    - applications-dependencies-install
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - npm run --prefix sources/applications lint.check
    - echo "applications Check Linting Finished"

applications-unit-tests:
  stage: test
  dependencies:
    - applications-dependencies-install
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - npm run --prefix sources/applications test.jest.coverage
    - echo "Web Application Unit Tests Finished"
  artifacts:
    paths:
      - sources/applications/reports

applications-compodoc:
  stage: test
  dependencies:
    - applications-dependencies-install
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - npm run --prefix sources/applications docs.compodoc
    - echo "Web Application Compodoc Generation Finished"
  artifacts:
    paths:
      - sources/applications/reports

applications-storybook:
  stage: test
  dependencies:
    - applications-dependencies-install
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - npm run --prefix sources/applications storybook.build
    - echo "Storybook Building Finished"
  artifacts:
    paths:
      - sources/applications/reports

applications-dependencies-graph:
  stage: test
  dependencies:
    - applications-dependencies-install
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - npm run --prefix sources/applications dep-graph
    - echo "applications Dependencies Graph Generation Finished"
  artifacts:
    paths:
      - sources/applications/reports

web-application-bundle-analysis:
  stage: test
  dependencies:
    - applications-dependencies-install
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - npm run --prefix sources/applications analyze.web.application.bundle
    - echo "Web Application Bundle Analysis Finished"
  artifacts:
    paths:
      - sources/applications/reports

web-application-e2e-tests:
  stage: test
  dependencies:
    - applications-dependencies-install
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - npm run --prefix sources/applications e2e.web.application
    - echo "Web Application E2E Tests Finished"
  artifacts:
    paths:
      - sources/applications/reports

web-application-lighthouse:
  stage: audit
  dependencies:
    - web-application-deploy-staging
  script:
    - mkdir -p sources/applications/reports/lighthouse
    - lighthouse-ci $WEB_APPLIATOIN_STAGING_URL --silent --report sources/applications/reports/lighthouse
    - echo "Web Application Lighthouse Analysis Finished"
  artifacts:
    paths:
      - sources/applications/reports

services-example-web-artillery:
  stage: audit
  dependencies:
    - web-application-deploy-staging
  script:
    - mkdir -p sources/applications/reports/lighthouse
    - artillery quick --count 10 -n 20 https://artillery.io/
    - echo "Web Application Artillery Load Tests Finished"
  artifacts:
    paths:
      - sources/applications/reports

web-application-deploy-staging:
  stage: staging
  dependencies:
    - applications-dependencies-install
    - web-application-build-staging
  environment:
    name: staging
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - pnpm install --prefix sources/applications/functions --offline
    - npm run --prefix sources/applications deploy.web.application
    - echo "Staging Deployment Finished"
  artifacts:
    paths:
      - sources/applications/dist
  when: always

web-application-deploy-production:
  stage: production
  dependencies:
    - applications-dependencies-install
    - web-application-build-production
  environment:
    name: production
  cache:
    key: $CI_PROJECT_NAMESPACE
    policy: pull
    paths:
      - .pnpm-store/
  script:
    - pnpm install --prefix sources/applications --offline
    - pnpm install --prefix sources/applications/functions --offline
    - mkdir sources/applications/dist/apps
    - mv sources/applications/production/* sources/applications/dist/apps
    - npm run --prefix sources/applications deploy.web.application
    - echo "Production Deployment Finished"
  artifacts:
    paths:
      - sources/applications/production
  only:
    - master
  when: manual

pages:
  stage: reports
  before_script:
    - echo Skip Before Scripts
  dependencies:
    - applications-unit-tests
    - applications-compodoc
    - applications-storybook
    - applications-dependencies-graph
    - web-application-bundle-analysis
    - web-application-e2e-tests
    - web-application-lighthouse
  script:
    - mkdir public
    - cp -r sources/applications/tools/report-wrapper/* public
    - cp -r sources/applications/reports/* public
    - echo "Pages Publishing Finished"
  artifacts:
    paths:
      - public
      - sources/applications/reports
    expire_in: 30 days

hiptest:
  stage: reports
  image: docker:stable
  before_script:
    - echo Skip Before Scripts
  cache: {}
  script:
    - docker run -it --rm -u $UID -v $(pwd):/app hiptest/hiptest-publisher --config-file=sources/applications/hiptest-publisher.conf --push="sources/applications/reports/apps/web-application/mocha/*.xml"
    - echo "Hiptest Report Pablishing Finished"
  artifacts:
    paths:
      - sources/applications/reports
